// <auto-generated />
using System;
using AwesomeLibrary.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AwesomeLibrary.API.Migrations
{
    [DbContext(typeof(AwesomeLibraryDbContext))]
    [Migration("20220711152601_SeedDatabase")]
    partial class SeedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AwesomeLibrary.API.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4a4a08f-7a45-4f5d-8b01-8df88ddcb84a"),
                            DateOfBirth = new DateTime(1877, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1962, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hermann",
                            LastName = "Hesse"
                        },
                        new
                        {
                            Id = new Guid("f1751877-39ce-4c58-b8be-8e7969a9cc16"),
                            DateOfBirth = new DateTime(1952, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Robert",
                            LastName = "Martin"
                        },
                        new
                        {
                            Id = new Guid("82815d61-6858-43b3-9104-07a4182b8ef6"),
                            DateOfBirth = new DateTime(1947, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = new Guid("2d02c1e4-9976-464e-a31c-4a3c8ff2b58b"),
                            DateOfBirth = new DateTime(1943, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Peter",
                            LastName = "Straub"
                        });
                });

            modelBuilder.Entity("AwesomeLibrary.API.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("498d1371-2cbe-4e36-8bd9-dcd041433d86"),
                            Genre = "Spiritality",
                            Pages = 216,
                            Publisher = "Rao",
                            PublishingYear = 2013,
                            Title = "Siddhartha"
                        },
                        new
                        {
                            Id = new Guid("e973d751-c737-4f42-bcd7-80ed8304e826"),
                            Genre = "Programming",
                            Pages = 464,
                            Publisher = "Pearson Education",
                            PublishingYear = 2008,
                            Title = "Clean Code"
                        },
                        new
                        {
                            Id = new Guid("fb7ac48e-6a30-426f-9ccc-e0a5659911e1"),
                            Genre = "Fiction",
                            Pages = 992,
                            Publisher = "Orion Publishing",
                            PublishingYear = 2012,
                            Title = "The Talisman"
                        },
                        new
                        {
                            Id = new Guid("35b4208e-a3b7-404d-aa08-d2db7a386776"),
                            Genre = "Horror",
                            Pages = 498,
                            Publisher = "Hodder & Stoughton Ltd",
                            PublishingYear = 2007,
                            Title = "The Shining"
                        });
                });

            modelBuilder.Entity("AwesomeLibrary.API.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("b4a4a08f-7a45-4f5d-8b01-8df88ddcb84a"),
                            BookId = new Guid("498d1371-2cbe-4e36-8bd9-dcd041433d86")
                        },
                        new
                        {
                            AuthorId = new Guid("f1751877-39ce-4c58-b8be-8e7969a9cc16"),
                            BookId = new Guid("e973d751-c737-4f42-bcd7-80ed8304e826")
                        },
                        new
                        {
                            AuthorId = new Guid("82815d61-6858-43b3-9104-07a4182b8ef6"),
                            BookId = new Guid("fb7ac48e-6a30-426f-9ccc-e0a5659911e1")
                        },
                        new
                        {
                            AuthorId = new Guid("82815d61-6858-43b3-9104-07a4182b8ef6"),
                            BookId = new Guid("35b4208e-a3b7-404d-aa08-d2db7a386776")
                        },
                        new
                        {
                            AuthorId = new Guid("2d02c1e4-9976-464e-a31c-4a3c8ff2b58b"),
                            BookId = new Guid("fb7ac48e-6a30-426f-9ccc-e0a5659911e1")
                        });
                });

            modelBuilder.Entity("AwesomeLibrary.API.Entities.BookAuthor", b =>
                {
                    b.HasOne("AwesomeLibrary.API.Entities.Author", "Author")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeLibrary.API.Entities.Book", "Book")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("AwesomeLibrary.API.Entities.Author", b =>
                {
                    b.Navigation("BooksAuthors");
                });

            modelBuilder.Entity("AwesomeLibrary.API.Entities.Book", b =>
                {
                    b.Navigation("BooksAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
